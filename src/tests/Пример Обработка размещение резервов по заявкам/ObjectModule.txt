Перем	ЮТест;
Перем ГенераторДанных;
Перем Сервис;
Перем ТестируемаяОбработка;

// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_ПротестироватьПравильностьПеревода_НП_в_НУ");
	ВсеТесты.Добавить("ТестДолжен_ПротестироватьПравильностьПеревода_НУ_в_НП");
	ВсеТесты.Добавить("ТестДолжен_ПротестироватьЧастьПолучениеДвиженийПоРезервамВЗапросе");
	ВсеТесты.Добавить("ТестДолжен_ПротестироватьЧастьПолучениеОстатковПоРезервамВЗапросе");
	ВсеТесты.Добавить("ТестДолжен_ПротестироватьЗаполнениеТабличнойЧасти_РазмещениеТоваров");
	ВсеТесты.Добавить("ТестДолжен_ПодготовитьДанныеДляОтправкиЗаявкиНаСогласование");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомНабораТестов() Экспорт
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
	
	ПутьККаталогуИнструментов = ПутьКПромежуточномуКаталогу(ИспользуемоеИмяФайла,"Тестирование") + "Инструменты" + ПолучитьРазделительПути();
	
	Путь = ПутьККаталогуИнструментов + "Генератор данных.epf";
	ГенераторДанных = ВнешниеОбработки.Создать(Путь, Ложь);
	
	Путь = ПутьККаталогуИнструментов + "Сервис.epf";
	Сервис= ВнешниеОбработки.Создать(Путь, Ложь);
	
	ПутьКЯндексДиску = ПутьКПромежуточномуКаталогу(ИспользуемоеИмяФайла, "YandexDisk");
	Путь = ПутьКЯндексДиску + "Корус\Обмен\Разработка обработки Размещение резервов по заявкам\ГПН_РазмещениеПервичныхЗаявок - 20150623_001.epf";
	ТестируемаяОбработка = ВнешниеОбработки.Создать(Путь, Ложь);
	ТестируемаяОбработка.НачалоПериода = "20100101";
	ТестируемаяОбработка.КонецПериода = "20100131";
	ТестируемаяОбработка.ОтборПоПользователю = Истина;
	
	ЗаполнитьНастройкиПользователя();
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗапускаНабораТестов() Экспорт
КонецПроцедуры

// ТЕСТЫ

Процедура ТестДолжен_ПротестироватьПравильностьПеревода_НП_в_НУ() Экспорт
	Макет = ПолучитьМакет("ТестированиеПеревода_НП_в_НУ");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Запрос = ПолучитьЗапросИзТестируемойОбработки(ТестовыеДанные);
	
	ИмяВременнойТаблицы = "втПеревод_НП_В_НУ";
	
	ОжидаемаяТаблица = ТестовыеДанные[ИмяВременнойТаблицы];
	
	ФактическаяТаблица = Сервис.ПрочитатьВременнуюТаблицу(ИмяВременнойТаблицы, Запрос);
	
	Сервис.ПроверитьРавенствоТаблиц(ОжидаемаяТаблица, ФактическаяТаблица, "Не совпадает результат временной таблицы: " + ИмяВременнойТаблицы);
КонецПроцедуры

Процедура ТестДолжен_ПротестироватьПравильностьПеревода_НУ_в_НП() Экспорт
	Макет = ПолучитьМакет("ТестированиеПеревода_НУ_в_НП");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Запрос = ПолучитьЗапросИзТестируемойОбработки(ТестовыеДанные);
	
	Оповестить("ПоказатьПеременныеТеста", ТестовыеДанные);
	Оповестить("ОткрытьКонсольЗапросов", ТестируемаяОбработка.Запрос);
	
	ИмяВременнойТаблицы = "втПеревод_НУ_В_НП";
	
	ОжидаемаяТаблица = ТестовыеДанные[ИмяВременнойТаблицы];
	ФактическаяТаблица = Сервис.ПрочитатьВременнуюТаблицу(ИмяВременнойТаблицы, Запрос);
	
	Сервис.ПроверитьРавенствоТаблиц(ОжидаемаяТаблица, ФактическаяТаблица, "Не совпадает результат временной таблицы: " + ИмяВременнойТаблицы);
КонецПроцедуры

Процедура ТестДолжен_ПротестироватьЧастьПолучениеДвиженийПоРезервамВЗапросе() Экспорт
	Макет = ПолучитьМакет("СправочникиИНастроечныеРегистры");
	ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Макет = ПолучитьМакет("ФильтрыОбработки");
	ФильтрыОбработки = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Макет = ПолучитьМакет("ТестированиеПолученияДвиженийПоРезервам");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Запрос = ПолучитьЗапросИзТестируемойОбработки(ФильтрыОбработки);
	Оповестить("ОткрытьКонсольЗапросов", ТестируемаяОбработка.Запрос);
	Оповестить("ПоказатьПеременныеТеста", ТестовыеДанные);
	
	ИмяВременнойТаблицы = "втДвижения";
	ОжидаемаяТаблица = ТестовыеДанные[ИмяВременнойТаблицы];
	ФактическаяТаблица = Сервис.ПрочитатьВременнуюТаблицу(ИмяВременнойТаблицы, Запрос);
	
	Сервис.ПроверитьРавенствоТаблиц(ОжидаемаяТаблица, ФактическаяТаблица, "Не совпадает результат временной таблицы: " + ИмяВременнойТаблицы);
	
КонецПроцедуры

Процедура ТестДолжен_ПротестироватьЧастьПолучениеОстатковПоРезервамВЗапросе() Экспорт
	Макет = ПолучитьМакет("СправочникиИНастроечныеРегистры");
	ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Макет = ПолучитьМакет("ФильтрыОбработки");
	ФильтрыОбработки = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Макет = ПолучитьМакет("ТестированиеПолученияОстатковПоРезервам");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ТестируемаяОбработка.КонецПериода = "20100115";
	Запрос = ПолучитьЗапросИзТестируемойОбработки(ФильтрыОбработки);
	
	Оповестить("ОткрытьКонсольЗапросов", ТестируемаяОбработка.Запрос);
	Оповестить("ПоказатьПеременныеТеста", ТестовыеДанные);
	
	ОжидаемаяТаблица = ТестовыеДанные.ТабличнаяЧасть_ОстаткиИОборотыТоваров;
	ФактическаяТаблица = ТестируемаяОбработка.ОстаткиИОборотыТоваров.Выгрузить();
	
	Сервис.ПроверитьРавенствоТаблиц(ОжидаемаяТаблица, ФактическаяТаблица, "Не совпадает результат таблицы: ТабличнаяЧасть_ОстаткиИОборотыТоваров");
	
КонецПроцедуры

Процедура ТестДолжен_ПротестироватьЗаполнениеТабличнойЧасти_РазмещениеТоваров() Экспорт
	Макет = ПолучитьМакет("ФильтрыОбработки");
	ФильтрыОбработки = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЗаполнитьФильтрыОбработки(ФильтрыОбработки);
	
	Макет = ПолучитьМакет("ТестТабличнойЧасти_РазмещениеТоваров");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	//ТестируемаяОбработка.ОбновитьРазмещениеТоваров();
	
	Оповестить("ОткрытьФормуОбъекта", ТестируемаяОбработка);
	
	ОжидаемаяТаблица = ТестовыеДанные.ТабличнаяЧасть_РазмещениеТоваров;
	ФактическаяТаблица = ТестируемаяОбработка.РазмещениеТоваров.Выгрузить();
	
	Сервис.ПроверитьРавенствоТаблиц(ОжидаемаяТаблица, ФактическаяТаблица, "Не совпадает табличная часть РазмещениеТоваров");
КонецПроцедуры

Процедура ТестДолжен_ПодготовитьДанныеДляОтправкиЗаявкиНаСогласование() Экспорт
	Макет = ПолучитьМакет("ФильтрыОбработки");
	ФильтрыОбработки = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	ЗаполнитьФильтрыОбработки(ФильтрыОбработки);
	
	Макет = ПолучитьМакет("СправочникиИНастроечныеРегистры");
	ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	Макет = ПолучитьМакет("МоделированиеОтправкиЗаявкиНаСогласование");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Оповестить("ОткрытьФормуОбъекта", ТестируемаяОбработка);
	Оповестить("ОткрытьКонсольЗапросов", Новый Запрос);
	
КонецПроцедуры

// ПОМОЩНИКИ

Функция ПолучитьЗапросИзТестируемойОбработки(ТестовыеДанные)
	
	ЗаполнитьФильтрыОбработки(ТестовыеДанные);
	
	ТестируемаяОбработка.ЗаполнитьОстаткиТоваровПоДнямПериода();
	
	Возврат ТестируемаяОбработка.Запрос;
КонецФункции

Процедура ЗаполнитьФильтрыОбработки(ТестовыеДанные)
	тч = Неопределено;
	Если ТестовыеДанные.Свойство("ТабличнаяЧасть_Товары", тч) Тогда
		ТестируемаяОбработка.Товары.Загрузить(тч);
	КонецЕсли;
	
	тч = Неопределено;
	Если ТестовыеДанные.Свойство("ТабличнаяЧасть_Склады", тч) Тогда
		ТестируемаяОбработка.Склады.Загрузить(тч);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьНастройкиПользователя()
	Макет = ПолучитьМакет("НастройкиПользователя");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	глОбщиеЗначения.ЗначенияНастроекПользователей[ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация] = ТестовыеДанные.СтруктураПараметров.Организация;
КонецПроцедуры

Функция ПутьКПромежуточномуКаталогу(ИсходныйПуть, ПромежуточныйКаталог)
	ЗначениеПоиска = ПолучитьРазделительПути() + нрег(ПромежуточныйКаталог) + ПолучитьРазделительПути();
	ЗначениеЗамены = ЗначениеПоиска + Символы.ПС;
	Путь = СтрЗаменить(НРег(ИсходныйПуть), ЗначениеПоиска, ЗначениеЗамены);
	Возврат СтрПолучитьСтроку(Путь, 1);
КонецФункции 

