Перем ЮТест;
Перем ГенераторДанных;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_СоздатьПростойСправочник");
	ВсеТесты.Добавить("ТестДолжен_СоздатьГруппуСправочника");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДокумент");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДокументСТабличнойЧастью");
	ВсеТесты.Добавить("ТестДолжен_СоздатьТаблицуЗначений");
	ВсеТесты.Добавить("ТестДолжен_СоздатьЗаписиВНезависимомРегистреСведений");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДвиженияВРегистреНакопления");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПоискПеречисления");
	ВсеТесты.Добавить("ТестДолжен_ПодставитьВычислитьФормулуВЯчейке");
	ВсеТесты.Добавить("ТестДолжен_СоздатьЗадачуСТабличнойЧастью");
	ВсеТесты.Добавить("ТестДолжен_СоздатьБизесПроцессСТабличнойЧастью");
	ВсеТесты.Добавить("ТестДолжен_СоздатьЭлементПВХ");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСтруктуруИзМакета");
	ВсеТесты.Добавить("ТестДолжен_УстановитьЗначениеКонстантыИзМакета");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомНабораТестов() Экспорт
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
	
	ГенераторДанных = ВнешниеОбработки.Создать("G:\Мочалов\ПУБЛИКАЦИИ\git\Генератор данных\Генератор данных.epf", Ложь);
	НачатьТранзакцию();
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗапускаНабораТестов() Экспорт
КонецПроцедуры

Функция РазрешенСлучайныйПорядокВыполненияТестов() Экспорт
	Возврат Ложь;
КонецФункции

Процедура ТестДолжен_СоздатьПростойСправочник() Экспорт
	Макет = ПолучитьМакет("ПростойСправочник");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.МассивСозданныхЭлементов.Количество(), 1, "Не создалось ни одного элемента");
	Элемент = ТестовыеДанные.МассивСозданныхЭлементов[0];
	ЮТест.ПроверитьЗаполненность(Элемент.Наименование, "Не заполненно наименование созданного элемента");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьГруппуСправочника() Экспорт
	Макет = ПолучитьМакет("ГруппаСправочника");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Группа = ТестовыеДанные.Результат[0].Ссылка;
	ЮТест.ПроверитьЗаполненность(Группа.Наименование, "Не заполненно наименование созданного элемента");
	ЮТест.ПроверитьРавенство(Группа.ЭтоГруппа, Истина, "Не совпадает признак группы созданного объекта");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьДокумент() Экспорт
	Макет = ПолучитьМакет("ПростойДокумент");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Документ = ТестовыеДанные.МассивСозданныхДокументов[0];
	ЮТест.ПроверитьЗаполненность(Документ, "Не заполнен номер документа");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьДокументСТабличнойЧастью() Экспорт
	
	Макет = ПолучитьМакет("ДокументСТабличнойЧастью");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Документ = ТестовыеДанные.Результат[0].Ссылка;
	ЮТест.ПроверитьРавенство(Документ.ТабличнаяЧасть1.Количество(), 1, "Не заполнена табличная часть документа");
КонецПроцедуры

Процедура ТестДолжен_СоздатьТаблицуЗначений() Экспорт
	Макет = ПолучитьМакет("ПростаяТаблицаЗначений");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ТаблицаИзМакета = ТестовыеДанные.СозданнаяТаблица;
	ЮТест.ПроверитьРавенство(ТаблицаИзМакета.Количество(), 1, "Не совпадает количество строк созданной таблицы");
КонецПроцедуры

Процедура ТестДолжен_СоздатьЗаписиВНезависимомРегистреСведений() Экспорт
	Макет = ПолучитьМакет("НезависимыйРегистрСведений");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	НаборЗаписей = РегистрыСведений.РегистрСведений1.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ЮТест.ПроверитьРавенство(НаборЗаписей.Количество(), 2, "Не совпадает количество записей в регистре");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьДвиженияВРегистреНакопления() Экспорт
	
	Макет = ПолучитьМакет("РегистрНакопления");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ *
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1 КАК РегистрНакопления1");
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЮТест.ПроверитьРавенство(Выборка.Количество(), 2, "Не совпадает количество записей в регистре");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПоискПеречисления() Экспорт
	Макет = ПолучитьМакет("ПоискПеречисления");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ТаблицаИзМакета = ТестовыеДанные.ТаблицаСПереичислением;
	Перечисление = ТаблицаИзМакета[0][0];
	
	ЮТест.ПроверитьРавенство(ТипЗнч(Перечисление), Тип("ПеречислениеСсылка.Перечисление1"), "Не совпадает количество записей в регистре");
	
КонецПроцедуры

Процедура ТестДолжен_ПодставитьВычислитьФормулуВЯчейке() Экспорт
	Макет = ПолучитьМакет("ФормулаВЯчейке");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Элемент = ТестовыеДанные.ТаблицаСДанными[0][0];
	ЮТест.ПроверитьРавенство(Элемент, ПланыВидовХарактеристик.ПланВидовХарактеристик1.пвх01, "Не совпадает элемент ПВХ");
КонецПроцедуры

Процедура ТестДолжен_СоздатьЗадачуСТабличнойЧастью() Экспорт
	Макет = ПолучитьМакет("Задача");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.Результат.Количество(), 1, "Не создалось ни одной задачи");
	Элемент = ТестовыеДанные.Результат[0].Ссылка;
	ЮТест.ПроверитьЗаполненность(Элемент.Наименование, "Не заполненно наименование созданной задачи");
	ЮТест.ПроверитьРавенство(Элемент.ТабличнаяЧасть1.Количество(), 1, "Не заполнена табличная часть задачи");
КонецПроцедуры

Процедура ТестДолжен_СоздатьБизесПроцессСТабличнойЧастью() Экспорт
	Макет = ПолучитьМакет("БизнесПроцесс");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.Результат.Количество(), 1, "Не создалось ни одного бизнес процесса");
	Элемент = ТестовыеДанные.Результат[0].Ссылка;
	ЮТест.ПроверитьРавенство(Элемент.ТабличнаяЧасть1.Количество(), 1, "Не заполнена табличная часть бизнес процесса");
КонецПроцедуры

Процедура ТестДолжен_СоздатьЭлементПВХ() Экспорт
	Макет = ПолучитьМакет("ЭлементПВХ");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.МассивСозданныхЭлементов.Количество(), 1, "Не создалось ни одного элемента ПВХ");
	Элемент = ТестовыеДанные.МассивСозданныхЭлементов[0];
	ЮТест.ПроверитьЗаполненность(Элемент.Наименование, "Не заполненно наименование созданного элемента ПВХ");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьСтруктуруИзМакета() Экспорт
	Макет = ПолучитьМакет("Структура");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	СтруктураИзМакета = ТестовыеДанные.СтруктураИзМакета;
	ЮТест.ПроверитьРавенство(ТипЗнч(СтруктураИзМакета), Тип("Структура"), "Значение не является структурой");
	ЮТест.ПроверитьЗаполненность(СтруктураИзМакета.Ключ1, "Не заполняется значение структуры");
	
КонецПроцедуры

Процедура ТестДолжен_УстановитьЗначениеКонстантыИзМакета() Экспорт
	Макет = ПолучитьМакет("Константы");
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЗначениеКонстанты = Константы.Константа1.Получить();
	ЮТест.ПроверитьЗаполненность(ЗначениеКонстанты, "Константа не заполнена");
	
КонецПроцедуры


