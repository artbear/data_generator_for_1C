
Перем МассивОчищенныхДокументов;

Функция СоздатьДанныеПоТабличномуДокументу(Макет) Экспорт
	
	ПеременныеТекущегоСценария = Новый Структура;
	
	Для счСтр = 1 по Макет.ВысотаТаблицы Цикл
		// Читаем первую колонку макета - шапка данных
		ИмяПараметра = Макет.Область(счСтр, 1).Текст;
		ЗначениеПараметра = Макет.Область(счСтр, 2).Текст;
		Если ПустаяСтрока(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипПеременной = Неопределено;
		ИмяПеременной = Неопределено;
		
		ИмяПараметра = Макет.Область(счСтр, 1).Текст;
		ИмяПараметра = СокрЛП(ИмяПараметра);
		ИмяПараметра = ВРЕГ(ИмяПараметра);
		
		ЗначениеПараметра = Макет.Область(счСтр, 2).Текст;
		ЗначениеПараметра = СокрЛП(ЗначениеПараметра);
		Пока ЗначениеЗаполнено(ИмяПараметра) Цикл
			
			Если ИмяПараметра = "ТИП" Тогда
				ТипПеременной = ЗначениеПараметра;
			ИначеЕсли ИмяПараметра = "ИМЯ" Тогда
				ИмяПеременной = ЗначениеПараметра;
			КонецЕсли;
			
			счСтр = счСтр + 1;
			ИмяПараметра = врег(Макет.Область(счСтр, 1).Текст);
			ЗначениеПараметра = Макет.Область(счСтр, 2).Текст;
		КонецЦикла;
		
		Если ТипПеременной = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Читаем третью колонку макета - таблица данных
		НачСтрока = счСтр; // НачСтрока - Имена колонок таблицы, НачСтрока+1 - Описание типов (может быть незаполнено)
		счСтр = счСтр + 2;
		Пока ЗначениеЗаполнено(Макет.Область(счСтр, 3).Текст) Цикл
			КонСтрока = счСтр;
			счСтр = счСтр + 1;
		КонецЦикла;
		
		Область = Макет.ПолучитьОбласть(НачСтрока,,КонСтрока);
		Попытка
			ТаблицаИзМакета = ПрочитатьТаблицуЗначенийИзМакета(Область);
		Исключение
			Описание = ОписаниеОшибки();
			Описание = "Ошибка при чтении макета в строках с "+НачСтрока + " по " + КонСтрока +" : " + Описание;
			ВызватьИсключение Описание;
		КонецПопытки;
		
		ПостфиксМетода = Лев(ТипПеременной, Найти(ТипПеременной, ".")-1);
		Если ПустаяСтрока(ПостфиксМетода) Тогда
			ПостфиксМетода = ТипПеременной;
		КонецЕсли;
		ВидМетаданных = СтрЗаменить(ТипПеременной, ПостфиксМетода+".", "");
		
		Попытка
			Результат = Вычислить("ЗаполнитьИзТаблицыЗначений_" + ПостфиксМетода + "(ТаблицаИзМакета,ВидМетаданных)");
		Исключение
			Описание = ОписаниеОшибки();
			Описание = "Ошибка при создании данных из макета в строках с "+НачСтрока + " по " + КонСтрока +" : " + Описание;
			ВызватьИсключение Описание;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ИмяПеременной) Тогда
			ПеременныеТекущегоСценария.Вставить(ИмяПеременной, Результат);
		КонецЕсли;
		
		СчСтр = счСтр - 1;
		
	КонецЦикла;
	
	Возврат ПеременныеТекущегоСценария;
КонецФункции

Функция ПрочитатьТаблицуЗначенийИзМакета(Область)
	
	ДополнительныеПараметрыКолонок = Новый Структура;
	
	ТаблицаИзМакета = Новый ТаблицаЗначений;
	Для счКол = 3 по Область.ШиринаСтраницы Цикл
		ИмяКолонки = Область.Область(1, счКол).Текст;
		Если ПустаяСтрока(ИмяКолонки) Тогда
			Прервать;
		КонецЕсли;
		
		ТипКолонки = Область.Область(2, счКол).Текст;
		Поз = Найти(ТипКолонки, "/");
		Если Поз Тогда
			ДополнительныйПараметр = Сред(ТипКолонки, Поз+1);
			ДополнительныеПараметрыКолонок.Вставить(ИмяКолонки, ДополнительныйПараметр);
			ТипКолонки = СтрЗаменить(ТипКолонки, "/"+ДополнительныйПараметр, "");
		Иначе
			ДополнительныеПараметрыКолонок.Вставить(ИмяКолонки, "");
		КонецЕсли;
		Если ПустаяСтрока(ТипКолонки) Тогда
			ТаблицаИзМакета.Колонки.Добавить(ИмяКолонки);
		Иначе
			ТаблицаИзМакета.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(ТипКолонки));
		КонецЕсли;
	КонецЦикла;
	
	Для счСтр = 3 по Область.ВысотаТаблицы Цикл
		Если ПустаяСтрока(Область.Область(счСтр, 3).Текст) Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаИзМакета.Добавить();
		Для счКол = 1 по ТаблицаИзМакета.Колонки.Количество() Цикл
			Колонка = ТаблицаИзМакета.Колонки[счКол-1];
			Значение = Область.Область(счСтр, счКол+2).Текст;
			ТипыКолонки = Колонка.ТипЗначения.Типы();
			
			Если ТипыКолонки.Количество() Тогда
				мдТип = Метаданные.НайтиПоТипу(ТипыКолонки[0]);
			Иначе
				мдТип = Неопределено;
			КонецЕсли;
			
			Если Найти(Значение, "=") = 1 Тогда
				Значение = Вычислить(Сред(Значение, 2));
			ИначеЕсли мдТип = Неопределено Тогда
				Значение = Строка(Значение);
			ИначеЕсли Метаданные.Перечисления.Содержит(мдТип) Тогда
				Значение = НайтиПеречисление(Значение, мдТип);
			ИначеЕсли Метаданные.Документы.Содержит(мдТип) Тогда
				Значение = НайтиСоздатьДокумент(Значение, мдТип);
			ИначеЕсли Метаданные.Справочники.Содержит(мдТип) Тогда
				ДополнительныйПараметр = ДополнительныеПараметрыКолонок[Колонка.Имя];
				Значение = НайтиСоздатьСправочник(Значение, мдТип, ДополнительныйПараметр);
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(мдТип) Тогда
				ДополнительныйПараметр = ДополнительныеПараметрыКолонок[Колонка.Имя];
				Значение = НайтиСоздатьПВХ(Значение, мдТип, ДополнительныйПараметр);
			КонецЕсли;
			
			НоваяСтрока[Колонка.Имя] = Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция НайтиСоздатьДокумент(Номер, ТипМетаданных)
	Дата = Дата("20000101");
	
	Если ПустаяСтрока(Номер) Тогда
		Возврат Документы[ТипМетаданных.Имя].ПустаяСсылка();
	КонецЕсли;
	
	ДокументСсылка = Документы[ТипМетаданных.Имя].НайтиПоНомеру(Номер, Дата);
	Если НЕ ДокументСсылка.Пустая() Тогда
		Возврат ДокументСсылка;
	КонецЕсли;
	
	ДокументОбъект = Документы[ТипМетаданных.Имя].СоздатьДокумент();
	ДокументОбъект.Номер = Номер;
	ДокументОбъект.Дата = Дата;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать();
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции
Функция НайтиСоздатьСправочник(Код, ТипМетаданных, ДополнительныйПараметр)
	Если ПустаяСтрока(Код) Тогда
		Возврат Справочники[ТипМетаданных.Имя].ПустаяСсылка();
	КонецЕсли;
	
	ЭтоСправочникБезКода = Метаданные.Справочники[ТипМетаданных.Имя].ДлинаКода = 0;
	Если ЭтоСправочникБезКода Тогда
		СправочникСсылка = Справочники[ТипМетаданных.Имя].НайтиПоНаименованию(Код);
	Иначе
		СправочникСсылка = Справочники[ТипМетаданных.Имя].НайтиПоКоду(Код);
	КонецЕсли;
	
	Если НЕ СправочникСсылка.Пустая() Тогда
		Возврат СправочникСсылка;
	КонецЕсли;
	
	Если НРег(ДополнительныйПараметр) = "группа" Тогда
		СправочникОбъект = Справочники[ТипМетаданных.Имя].СоздатьГруппу();
	Иначе
		СправочникОбъект = Справочники[ТипМетаданных.Имя].СоздатьЭлемент();
	КонецЕсли;
	
	Буфер = Новый Структура("Наименование,Код", Код, Код);
	ЗаполнитьЗначенияСвойств(СправочникОбъект, Буфер);
	
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции
Функция НайтиСоздатьПВХ(Код, ТипМетаданных, ДополнительныйПараметр)
	Если ПустаяСтрока(Код) Тогда
		Возврат ПланыВидовХарактеристик[ТипМетаданных.Имя].ПустаяСсылка();
	КонецЕсли;
	
	ЭлементСсылка = ПланыВидовХарактеристик[ТипМетаданных.Имя].НайтиПоКоду(Код);
	Если НЕ ЭлементСсылка.Пустая() Тогда
		Возврат ЭлементСсылка;
	КонецЕсли;
	
	Если НРег(ДополнительныйПараметр) = "группа" Тогда
		ЭлементОбъект = ПланыВидовХарактеристик[ТипМетаданных.Имя].СоздатьГруппу();
	Иначе
		ЭлементОбъект = ПланыВидовХарактеристик[ТипМетаданных.Имя].СоздатьЭлемент();
	КонецЕсли;
	ЭлементОбъект.Код = Код;
	
	Буфер = Новый Структура("Наименование", Код);
	ЗаполнитьЗначенияСвойств(ЭлементОбъект, Буфер);
	
	ЭлементОбъект.ОбменДанными.Загрузка = Истина;
	ЭлементОбъект.Записать();
	
	Возврат ЭлементОбъект.Ссылка;
	
КонецФункции
Функция НайтиПеречисление(вхЗначение, ТипМетаданных)
	Если ПустаяСтрока(вхЗначение) Тогда
		Возврат Перечисления[ТипМетаданных.Имя].ПустаяСсылка();
	КонецЕсли;
	Возврат  Перечисления[ТипМетаданных.Имя][вхЗначение];
КонецФункции

Функция ЗаполнитьИзТаблицыЗначений_ДвиженияДокумента(ТаблицаИзМакета, ИмяРегистра)
	тДокументы = ТаблицаИзМакета.Скопировать(,"Регистратор");
	тДокументы.Свернуть("Регистратор");
	мДокументы = тДокументы.ВыгрузитьКолонку("Регистратор");
	ОчиститьДокументыСДвижениями(мДокументы);
	
	мДвижения = Новый Массив;
	Для каждого Строка из ТаблицаИзМакета Цикл
		Движения = Строка
					.Регистратор
					.ПолучитьОбъект()
					.Движения[ИмяРегистра];
		Движения.Прочитать();
		НовоеДвижение = Движения.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, Строка);
		Если НовоеДвижение.Период = Дата(1,1,1) Тогда
			НовоеДвижение.Период = НовоеДвижение.Регистратор.Дата;
		КонецЕсли;
		Движения.Записать(Истина);
		мДвижения.Добавить(НовоеДвижение);
	КонецЦикла;
	
	Возврат мДвижения;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Документ(ТаблицаИзМакета, ВидДокумента)
	тДокументы = ТаблицаИзМакета.Скопировать(,"Ссылка");
	тДокументы.Свернуть("Ссылка");
	мДокументы = тДокументы.ВыгрузитьКолонку("Ссылка");
	ОчиститьДокументыСДвижениями(мДокументы);
	
	мДокументы = Новый Массив;
	ИмяТабличнойЧасти = "";
	Если Найти(нрег(ВидДокумента), ".табличнаячасть.") Тогда
		Буфер = СтрЗаменить(нрег(ВидДокумента), ".табличнаячасть.", "~");
		ИмяТабличнойЧасти = Сред(Буфер, Найти(Буфер, "~")+1);
	КонецЕсли;
	
	Для каждого Строка из ТаблицаИзМакета Цикл
		ДокументОбъект = Строка.Ссылка.ПолучитьОбъект();
		
		Если мДокументы.Найти(Строка.Ссылка) = Неопределено Тогда
			мДокументы.Добавить(Строка.Ссылка);
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, Строка);
		Иначе
			ЗаполнитьЗначенияСвойств(ДокументОбъект[ИмяТабличнойЧасти].Добавить(), Строка);
		КонецЕсли;
		ДокументОбъект.Проведен = Ложь;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Возврат мДокументы;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Справочник(ТаблицаИзМакета, ВидСправочника)
	мЭлементы = Новый Массив;
	Для каждого Строка из ТаблицаИзМакета Цикл
		СправочникОбъект = Строка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(СправочникОбъект, Строка);
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
		мЭлементы.Добавить(Строка.Ссылка);
	КонецЦикла;
	Возврат мЭлементы;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_ПланВидовХарактеристик(ТаблицаИзМакета, ВидПВХ)
	Возврат ЗаполнитьИзТаблицыЗначений_Справочник(ТаблицаИзМакета, ВидПВХ);
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_ТаблицаЗначений(ТаблицаИзМакета, ВидТаблицы)
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_РегистрСведений(ТаблицаИзМакета, ИмяРегистра)
	Если НРег(ТаблицаИзМакета.Колонки[0].Имя) = "регистратор" Тогда
		Возврат ЗаполнитьИзТаблицыЗначений_ДвиженияДокумента(ТаблицаИзМакета, ИмяРегистра);
	КонецЕсли;
	
	Для каждого Строка из ТаблицаИзМакета Цикл
		Менеджер = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, Строка);
		Менеджер.Прочитать();
		ЗаполнитьЗначенияСвойств(Менеджер, Строка);
		Менеджер.Записать(Истина);
	КонецЦикла;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_РегистрНакопления(ТаблицаИзМакета, ИмяРегистра)
	ЗаполнитьИзТаблицыЗначений_ДвиженияДокумента(ТаблицаИзМакета, ИмяРегистра);
КонецФункции
Процедура ОчиститьДокументыСДвижениями(МассивДокументов)
	Если МассивОчищенныхДокументов = Неопределено Тогда
		МассивОчищенныхДокументов = Новый Массив;
	КонецЕсли;
	
	Для каждого ДокументСсылка из МассивДокументов Цикл
		Если НЕ МассивОчищенныхДокументов.Найти(ДокументСсылка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивОчищенныхДокументов.Добавить(ДокументСсылка);
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Для каждого Движения из ДокументОбъект.Движения Цикл
			Движения.ОбменДанными.Загрузка = Истина;
			Движения.Очистить();
			Движения.Записать();
		КонецЦикла;
		
		Для каждого ТабличнаяЧасть из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			ДокументОбъект[ТабличнаяЧасть.Имя].Очистить();
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
КонецПроцедуры


